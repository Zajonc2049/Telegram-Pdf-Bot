import os
import logging
import tempfile
import sys
import asyncio # –î–æ–¥–∞–Ω–æ –¥–ª—è asyncio.create_task —Ç–∞ asyncio.sleep

from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters # Application –∑–∞–º—ñ—Å—Ç—å ApplicationBuilder
from telegram.error import Conflict # –Ü–Ω—à—ñ –ø–æ–º–∏–ª–∫–∏ –±—É–¥—É—Ç—å –æ–±—Ä–æ–±–ª–µ–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–∏–º Exception

from PIL import Image
import pytesseract
from fpdf import FPDF
from transliterate import translit

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("–ó–º—ñ–Ω–Ω–∞ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    sys.exit(1)

# –®–ª—è—Ö –¥–æ Tesseract (–∑–∞–∑–≤–∏—á–∞–π –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —è–≤–Ω–æ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –≤ Docker, —è–∫—â–æ –≤—ñ–Ω —î –≤ PATH)
# pytesseract.pytesseract.tesseract_cmd = "tesseract" # –†–æ–∑–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ, —è–∫—â–æ –≤–∏–Ω–∏–∫–∞—é—Ç—å –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ—à—É–∫–æ–º tesseract

# –®–ª—è—Ö –¥–æ —à—Ä–∏—Ñ—Ç—É
FONT_PATH = "/app/fonts/DejaVuSans.ttf"

def safe_text_for_pdf(text):
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –¥–ª—è PDF, –Ω–∞–º–∞–≥–∞—é—á–∏—Å—å –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–∏—Ä–∏–ª–∏—Ü—é."""
    try:
        # –°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —Ç–µ–∫—Å—Ç –≤–∂–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è latin-1 (–±–∞–∑–æ–≤–∏–π –¥–ª—è FPDF –±–µ–∑ Unicode —à—Ä–∏—Ñ—Ç—ñ–≤)
        # –¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º –∫–æ—Ä–µ–∫—Ç–Ω–æ, –∫—Ä–∞—â–µ –∑–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Unicode —à—Ä–∏—Ñ—Ç
        text.encode('latin-1') 
        return text
    except UnicodeEncodeError:
        # –Ø–∫—â–æ —î –∫–∏—Ä–∏–ª–∏—Ü—è, —è–∫—É FPDF –Ω–µ –º–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ –±–µ–∑ Unicode —à—Ä–∏—Ñ—Ç—É,
        # —ñ —è–∫—â–æ DejaVu –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–≤—Å—è, —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä—É—î–º–æ.
        try:
            return translit(text, 'uk', reversed=True)
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—ó: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è ASCII –∑ —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è–º.")
            return text.encode('ascii', 'ignore').decode('ascii')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text("üëã –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å–∫–∞–Ω –∞–±–æ —Ç–µ–∫—Å—Ç, —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é PDF!")

async def process_image_to_pdf(img_path: str, original_update: Update):
    """–î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF."""
    try:
        img = Image.open(img_path)
        # –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
        text = pytesseract.image_to_string(img, lang="ukr+eng")
        
        if not text.strip():
            await original_update.message.reply_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.")
            return None

        pdf = FPDF()
        pdf.add_page()
        
        font_loaded_successfully = False
        if os.path.exists(FONT_PATH):
            try:
                pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
                pdf.set_font("DejaVu", size=12)
                font_loaded_successfully = True
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç DejaVu: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à—Ä–∏—Ñ—Ç —Ç–∞ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è.")
                # –¢–µ–∫—Å—Ç –±—É–¥–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –Ω–∏–∂—á–µ, —è–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ
        
        if not font_loaded_successfully:
            processed_text = safe_text_for_pdf(text)
            pdf.set_font("Arial", size=12) # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à—Ä–∏—Ñ—Ç FPDF
            pdf.multi_cell(0, 10, processed_text)
        else:
            pdf.multi_cell(0, 10, text) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –∑ DejaVu
            
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf_file:
            pdf_output_path = temp_pdf_file.name
            pdf.output(pdf_output_path)
        
        return pdf_output_path

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è PDF: {e}")
        await original_update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF.")
        return None
    finally:
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if 'img_path' in locals() and os.path.exists(img_path):
             try:
                os.remove(img_path)
             except Exception as e_remove:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è {img_path}: {e_remove}")


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    if not update.message or not update.message.photo:
        return

    processing_msg = await update.message.reply_text("üì∑ –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
    img_download_path = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    pdf_path = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    
    try:
        photo_file = await update.message.photo[-1].get_file()
        
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_img_file:
            img_download_path = temp_img_file.name
            await photo_file.download_to_drive(img_download_path)

        pdf_path = await process_image_to_pdf(img_download_path, update) 
        # img_download_path –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ process_image_to_pdf

        if pdf_path:
            try:
                with open(pdf_path, "rb") as f:
                    await update.message.reply_document(
                        InputFile(f, filename="scan_to_pdf.pdf"),
                        caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                    )
            finally:
                if os.path.exists(pdf_path): # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π PDF
                    os.remove(pdf_path) 
        
        await processing_msg.delete()

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ñ–æ—Ç–æ: {e}")
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ processing_msg –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–µ—Ä–µ–¥ —Å–ø—Ä–æ–±–æ—é —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
        if 'processing_msg' in locals() and processing_msg:
            await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –±—É–ª–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ —Ä–∞–Ω—ñ—à–µ
        if img_download_path and os.path.exists(img_download_path):
            os.remove(img_download_path)
        if pdf_path and os.path.exists(pdf_path):
            os.remove(pdf_path)


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ (–∑–æ–±—Ä–∞–∂–µ–Ω—å, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö —è–∫ —Ñ–∞–π–ª–∏)"""
    if not update.message or not update.message.document:
        return

    doc = update.message.document
    img_download_path = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    pdf_path = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É

    if doc.mime_type and doc.mime_type.startswith("image/"):
        processing_msg = await update.message.reply_text(f"üñºÔ∏è –û–±—Ä–æ–±–ª—è—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏–π —Ñ–∞–π–ª ({doc.file_name or '—Ñ–∞–π–ª'})...")
        try:
            doc_file = await doc.get_file()
            
            file_extension = os.path.splitext(doc.file_name)[1] if doc.file_name else '.jpg'
            if not file_extension.startswith('.'): # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Ç–æ—á–∫–∏
                file_extension = '.' + (file_extension if file_extension else 'dat')


            with tempfile.NamedTemporaryFile(suffix=file_extension, delete=False) as temp_doc_file:
                img_download_path = temp_doc_file.name
                await doc_file.download_to_drive(img_download_path)

            pdf_path = await process_image_to_pdf(img_download_path, update)
            # img_download_path –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ process_image_to_pdf

            if pdf_path:
                try:
                    with open(pdf_path, "rb") as f:
                        output_filename = "ocr_document.pdf"
                        if doc.file_name:
                            base_name = os.path.splitext(doc.file_name)[0]
                            output_filename = f"{base_name}_ocr.pdf"
                        
                        await update.message.reply_document(
                            InputFile(f, filename=output_filename),
                            caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"
                        )
                finally:
                    if os.path.exists(pdf_path): # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π PDF
                        os.remove(pdf_path)
            
            await processing_msg.delete()

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            if 'processing_msg' in locals() and processing_msg:
                 await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —Ü–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        finally:
            # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
            if img_download_path and os.path.exists(img_download_path):
                os.remove(img_download_path)
            if pdf_path and os.path.exists(pdf_path):
                os.remove(pdf_path)
    else:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—è–∫ —Ñ–æ—Ç–æ –∞–±–æ —Ñ–∞–π–ª) –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ PDF.")


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF"""
    if not update.message or not update.message.text:
        return
        
    text_content = update.message.text.strip()
    
    if not text_content:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF.")
        return
        
    processing_msg = await update.message.reply_text("üìù –°—Ç–≤–æ—Ä—é—é PDF –∑ —Ç–µ–∫—Å—Ç—É...")
    pdf_output_path = None # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    
    try:
        pdf = FPDF()
        pdf.add_page()
        
        font_loaded_successfully = False
        if os.path.exists(FONT_PATH):
            try:
                pdf.add_font("DejaVu", "", FONT_PATH, uni=True)
                pdf.set_font("DejaVu", size=12)
                font_loaded_successfully = True
            except Exception as e:
                logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à—Ä–∏—Ñ—Ç DejaVu –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ PDF: {e}. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —à—Ä–∏—Ñ—Ç —Ç–∞ —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä–∞—Ü—ñ—è.")

        if not font_loaded_successfully:
            processed_text = safe_text_for_pdf(text_content)
            pdf.set_font("Arial", size=12)
            pdf.multi_cell(0, 10, processed_text)
        else:
            pdf.multi_cell(0, 10, text_content)
            
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf_file:
            pdf_output_path = temp_pdf_file.name
            pdf.output(pdf_output_path)
            
        try:
            with open(pdf_output_path, "rb") as f:
                await update.message.reply_document(
                    InputFile(f, filename="text_to_pdf.pdf"),
                    caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                )
        finally:
            if os.path.exists(pdf_output_path): # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π PDF
                os.remove(pdf_output_path)
                
        await processing_msg.delete()
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑ —Ç–µ–∫—Å—Ç—É: {e}")
        if 'processing_msg' in locals() and processing_msg:
            await processing_msg.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑ —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF –∑ —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    finally:
        if pdf_output_path and os.path.exists(pdf_output_path):
            os.remove(pdf_output_path)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–õ–æ–≥—É—î –ø–æ–º–∏–ª–∫–∏, —Å–ø—Ä–∏—á–∏–Ω–µ–Ω—ñ Update."""
    logger.error(msg="Exception while handling an update:", exc_info=context.error)
    
    if isinstance(context.error, Conflict):
        logger.critical("–ö–æ–Ω—Ñ–ª—ñ–∫—Ç! –ú–æ–∂–ª–∏–≤–æ, —ñ–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –∑ —Ü–∏–º —Ç–æ–∫–µ–Ω–æ–º.")
        if update and hasattr(update, 'message') and hasattr(update.message, 'reply_text'):
             try:
                await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ —ñ–Ω—à–∏–º –µ–∫–∑–µ–º–ø–ª—è—Ä–æ–º –±–æ—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
             except Exception as e_reply:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç: {e_reply}")


async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
    
    application = (
        Application.builder()
        .token(BOT_TOKEN)
        .connection_pool_size(10) 
        .pool_timeout(30)         
        .connect_timeout(30)
        .read_timeout(30)
        .write_timeout(30)
        .build()
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.Document.IMAGE, handle_document))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    application.add_error_handler(error_handler)

    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        await application.bot.delete_webhook(drop_pending_updates=True)
        logger.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ (—è–∫—â–æ –±—É–≤).")

        await application.run_polling(
            allowed_updates=Update.ALL_TYPES, 
            drop_pending_updates=True,
        )
        
    except Conflict:
        logger.critical("–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –ö–æ–Ω—Ñ–ª—ñ–∫—Ç. –Ü–Ω—à–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–æ –∑ —Ü–∏–º —Ç–æ–∫–µ–Ω–æ–º.")
    except Exception as e:
        logger.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É –∞–±–æ —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É.")
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ application –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —ñ —á–∏ –º–∞—î –º–µ—Ç–æ–¥ shutdown
        if 'application' in locals() and application and hasattr(application, 'shutdown'):
            try:
                logger.info("–°–ø—Ä–æ–±–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ application.shutdown() —É –±–ª–æ—Ü—ñ finally.")
                await application.shutdown()
                logger.info("application.shutdown() —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∑ finally.")
            except Exception as e_shutdown:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å application.shutdown() —É finally: {e_shutdown}")
        else:
            logger.warning("–û–±'—î–∫—Ç application –Ω–µ –±—É–≤ –¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –Ω–µ –º–∞—î –º–µ—Ç–æ–¥—É shutdown —É –±–ª–æ—Ü—ñ finally.")
        logger.info("–†–æ–±–æ—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (KeyboardInterrupt)")
    except RuntimeError as e:
        if "This event loop is already running" in str(e):
            logger.warning("–°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ asyncio.run() –≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ–º—É —Ü–∏–∫–ª—ñ.")
        else:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è asyncio: {e}", exc_info=True)
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–æ–ø–ª–µ–Ω–∞ —Ñ–∞—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}", exc_info=True)
    finally:
        logger.info("–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–≤ —Ä–æ–±–æ—Ç—É.")
