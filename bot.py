import os
import logging
import tempfile
import signal
import sys
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.error import Conflict, TimedOut, NetworkError
from PIL import Image
import pytesseract
from fpdf import FPDF
from transliterate import translit
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.environ.get("BOT_TOKEN")

# Ensure tesseract is in PATH if needed (for Docker)
pytesseract.pytesseract.tesseract_cmd = "tesseract"

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è application
application = None

def safe_text_for_pdf(text):
    """–ë–µ–∑–ø–µ—á–Ω–æ –æ–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –¥–ª—è PDF"""
    try:
        # –°–ø—Ä–æ–±–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        test_text = text.encode('latin1')
        return text
    except UnicodeEncodeError:
        # –Ø–∫—â–æ –Ω–µ –≤–¥–∞—î—Ç—å—Å—è, —Ç—Ä–∞–Ω—Å–ª—ñ—Ç–µ—Ä—É—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏
        try:
            return translit(text, 'uk', reversed=True)
        except:
            # –û—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç - –≤–∏–¥–∞–ª—è—î–º–æ –Ω–µ–ø—Ä–∏–ø—É—Å—Ç–∏–º—ñ —Å–∏–º–≤–æ–ª–∏
            return text.encode('ascii', 'ignore').decode('ascii')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    await update.message.reply_text("üëã –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞–Ω, —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é PDF –∑ —Ç–µ–∫—Å—Ç–æ–º!")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
    try:
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –æ–±—Ä–æ–±–∫–∏
        processing_msg = await update.message.reply_text("üì∑ –û–±—Ä–æ–±–ª—è—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...")
        
        file = await update.message.photo[-1].get_file()
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
        with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_img:
            await file.download_to_drive(temp_img.name)
            
            img = Image.open(temp_img.name)
            text = pytesseract.image_to_string(img, lang="ukr+eng")
            
            if not text.strip():
                await processing_msg.edit_text("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ.")
                os.remove(temp_img.name)
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ PDF –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Unicode
            pdf = FPDF()
            pdf.add_page()
            
            # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ DejaVu —à—Ä–∏—Ñ—Ç, —è–∫—â–æ —î
            font_loaded = False
            try:
                pdf.add_font("DejaVu", "", "fonts/DejaVuSans.ttf", uni=True)
                pdf.set_font("DejaVu", size=12)
                font_loaded = True
            except:
                # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
                text = safe_text_for_pdf(text)
                pdf.set_font("Arial", size=12)
                
            pdf.multi_cell(0, 10, text)
            
            with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf:
                pdf.output(temp_pdf.name)
                
                # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
                await processing_msg.delete()
                
                with open(temp_pdf.name, "rb") as f:
                    await update.message.reply_document(
                        InputFile(f, filename="extracted_text.pdf"),
                        caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                    )
                
                # Cleanup
                os.remove(temp_pdf.name)
            
            os.remove(temp_img.name)
            
    except Exception as e:
        logger.error(f"Error processing photo: {e}")
        try:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except:
            pass

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    try:
        text = update.message.text
        
        if len(text.strip()) == 0:
            await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF.")
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF
        processing_msg = await update.message.reply_text("üìù –°—Ç–≤–æ—Ä—é—é PDF...")
        
        pdf = FPDF()
        pdf.add_page()
        
        # –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ DejaVu —à—Ä–∏—Ñ—Ç, —è–∫—â–æ —î
        font_loaded = False
        try:
            pdf.add_font("DejaVu", "", "fonts/DejaVuSans.ttf", uni=True)
            pdf.set_font("DejaVu", size=12)
            font_loaded = True
        except:
            # –Ø–∫—â–æ —à—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ–±—Ä–æ–±–ª—è—î–º–æ —Ç–µ–∫—Å—Ç
            text = safe_text_for_pdf(text)
            pdf.set_font("Arial", size=12)
            
        pdf.multi_cell(0, 10, text)
        
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_pdf:
            pdf.output(temp_pdf.name)
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É
            await processing_msg.delete()
            
            with open(temp_pdf.name, "rb") as f:
                await update.message.reply_document(
                    InputFile(f, filename="text_document.pdf"),
                    caption="üìÑ PDF —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ –≤–∞—à–æ–≥–æ —Ç–µ–∫—Å—Ç—É"
                )
            
            # Cleanup
            os.remove(temp_pdf.name)
        
    except Exception as e:
        logger.error(f"Error processing text: {e}")
        try:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ PDF. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        except:
            pass

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    
    if isinstance(context.error, Conflict):
        logger.error("Bot conflict detected. Another instance might be running.")
        # –ü—Ä–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞
        if application:
            await application.stop()
        sys.exit(1)

def signal_handler(signum, frame):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è graceful shutdown"""
    logger.info(f"Received signal {signum}. Shutting down...")
    if application and application.running:
        application.stop_running()
    sys.exit(0)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    global application
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ —Å–∏–≥–Ω–∞–ª—ñ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è application –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .connection_pool_size(8)
        .pool_timeout(20.0)
        .connect_timeout(20.0)
        .read_timeout(20.0)
        .write_timeout(20.0)
        .build()
    )
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –û—á–∏—â–µ–Ω–Ω—è webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
        await application.bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
        await application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            close_loop=False
        )
        
    except Conflict as e:
        logger.error(f"Conflict error: {e}")
        logger.error("Another bot instance is running. Stopping...")
        await application.stop()
        sys.exit(1)
        
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await application.stop()
        sys.exit(1)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        sys.exit(1)
